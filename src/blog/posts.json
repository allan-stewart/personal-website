[
    {
        "title": "Resilient Programming",
        "file": "resilient-programming",
        "date": "Jul 18, 2020",
        "snip": "Conventional wisdom holds that in order to work effectively, you need to eliminate distractions. Interruptions can be particularly bad on software developers, as described in numerous articles, blogs, and [even](https://heeris.id.au/2013/this-is-why-you-shouldnt-interrupt-a-programmer/) [comic](https://dilbert.com/strip/2017-01-05) [strips](http://www.commitstrip.com/en/2018/01/11/the-war-on-interruptions/). But this is only one side of the equation. Are there things one can do to be more resilient to distraction?"
    },
    {
        "title": "Feedback Distance",
        "file": "feedback-distance",
        "date": "Dec 17, 2019",
        "snip": "Getting feedback is critical for developing software. We need it at multiple levels, from code reviews to monitoring production systems. [Feedback speed is important](./tighening-feedback-loops.html), but it can be difficult to measure how long it takes to get feedback due to the high degree of variation inherent in the processes. For example, UI tests often take significantly longer when they are failing than when they are passing. So can we measure feedback in some other way?"
    },
    {
        "title": "Making Technical Debt Visible",
        "file": "making-tech-debt-visible",
        "date": "Jul 10, 2019",
        "snip": "One of the problems with [technical debt](https://martinfowler.com/bliki/TechnicalDebt.html) is that it is effectively invisible. Usually only the coders can detect it, and even they can't always see it clearly. So how can we make it visible for other people, so they understand the impact? Without that, how we can make effective business decisions?"
    },
    {
        "title": "No Perfect Architecture",
        "file": "no-perfect-architecture",
        "date": "Mar 1, 2019",
        "snip": "What sort of software architecture should you be implementing? When looking at industry trends, blogs, conference talks, and the like, it is easy to think that other companies have everything figured out. You'd be forgiven for wanting to copy the success that others are having. But there is no perfect architecture. Everything is a set of tradeoffs; there are only good and bad fits for a context.",
        "canonical": "https://www.pluralsight.com/tech-blog/no-perfect-architecture"
    },
    {
        "title": "Testing HTTP Calls",
        "file": "testing-http-calls",
        "date": "Jan 18, 2019",
        "snip": "Making HTTP calls to get resources or call APIs is a staple of software development. But if you do not properly abstract the request construction and response handling from the HTTP library that you use, it can be extremely difficult to test.",
        "canonical": "https://www.pluralsight.com/tech-blog/testing-http-calls"
    },
    {
        "title": "Managing Technical Debt",
        "file": "managing-technical-debt",
        "date": "Dec 21, 2018",
        "snip": "Technical debt is a widely known metaphor which helps us think about how technical issues hurt our ability to deliver business value via software systems. But knowing the concept is different from actually managing technical debt. Unfortunately, many software teams know that they have technical debt, but don't know what do to about it.",
        "canonical": "https://www.pluralsight.com/tech-blog/managing-technical-debt"
    },
    {
        "title": "Tightening Feedback Loops",
        "file": "tightening-feedback-loops",
        "date": "Oct 12, 2018",
        "snip": "Feedback is the information we get back from the world in response to doing something. Without feedback, there is no way to know whether we are accomplishing our goals.",
        "canonical": "https://www.pluralsight.com/tech-blog/tightening-feedback-loops"
    },
    {
        "title": "Avoiding Secondary Work",
        "file": "avoiding-secondary-work",
        "date": "Jun 29, 2018",
        "snip": "An important lesson I've learned at Pluralsight is that when we let ourselves get too busy we create additional work for ourselves. This additional work is a form of non-valuable meta-work which I refer to as _secondary work._ It gets in the way of doing the work that actually delivers value.",
        "canonical": "https://www.pluralsight.com/tech-blog/avoiding-secondary-work"
    },
    {
        "title": "Reducing Risk by Deleting Code",
        "file": "delete-code",
        "date": "Apr 20, 2018",
        "snip": "One of my favorite activities as a software professional is to delete code. Over time, I've learned that this is one of the best things I can do because the ideal amount of code is _no code at all._",
        "canonical": "https://www.pluralsight.com/tech-blog/delete-code"
    },
    {
        "title": "Leaning into Eventual Consistency",
        "file": "leaning-into-eventual-consistency",
        "date": "Feb 23, 2018",
        "snip": "Distributed systems are hard. They have a lot of moving parts with complex interactions and are inherently multi-threaded. To make them work, there is often some form of eventual consistency at play. Embracing this can make software development easier.",
        "canonical": "https://www.pluralsight.com/tech-blog/leaning-into-eventual-consistency"
    },
    {
        "title": "Forms of Temporal Coupling",
        "file": "forms-of-temporal-coupling",
        "date": "Dec 1, 2017",
        "snip": "Coupling is an important concept in software development because it limits the ability of software to change. Temporal coupling is a kind of coupling where code is dependent on time in some way. It is particularly insidious because it is hard to detect unless you know what you are looking for.",
        "canonical": "https://www.pluralsight.com/tech-blog/forms-of-temporal-coupling"
    },
    {
        "title": "Architecture and Architects",
        "file": "architecture-and-architects",
        "date": "Oct 6, 2017",
        "snip": "The software industry has always held a basic assumption that architecture is important. By association, the role of architect has always been esteemed important. But unfortunately, it isn't always clear what architecture is or what an architect's job should be.",
        "canonical": "https://www.pluralsight.com/tech-blog/architecture-and-architects"
    },
    {
        "title": "Mob Programming",
        "file": "mob-programming",
        "date": "Jun 2, 2017",
        "snip": "When I joined Pluralsight, I knew going in that it was going to be a different kind of company. They were already practicing things that I'd been learning about and struggling to implement in my prior company, like TDD and continuous delivery. But I didn't realize just how different my day-to-day work would be until I found that my team was doing something called _mob programming_.",
        "canonical": "https://www.pluralsight.com/tech-blog/mob-programming"
    },
    {
        "title": "Continuous Code Reviews",
        "file": "continuous-code-reviews",
        "date": "Mar 17, 2017",
        "snip": "Code reviews are generally accepted as good thing in software development. Some of the benefits include improving quality, sharing knowledge of a system, and promoting collective code ownership.",
        "canonical": "https://www.pluralsight.com/tech-blog/continuous-code-reviews"
    }
]